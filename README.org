* Certificaat
** Definition
Certificaat is a general-purpose [[https://tools.ietf.org/html/draft-ietf-acme-acme-06][ACME]] client, fully compatible with the [[https://letsencrypt.org/][Let’s Encrypt]] CA.
** Installation
[[https://github.com/danielsz/certificaat/releases/latest][Download]] the latest release, extract the archive and drop the self-contained binary in your ~PATH~.

Java needs to be installed on your system.
** Usage
*** Command line

Type ~certificaat -h~ to familiarize yourself with the input it
expects.

By default, Certificaat will talk to Let’s Encrypt’s staging
server. The resulting certificates will be fake. This is so you can
practice until you are ready to issue a production certificate.

| Staging URI                    | Production URI         |
| acme://letsencrypt.org/staging | acme://letsencrypt.org |

To get a certificate for a domain, you need to run ~certificaat~ twice with different options:

1. ~certificaat authorize~
2. ~certificaat request~

Forever thereafter, the certificate can be renewed in one pass with ~certificaat renew~. 

**** Authorization

#+BEGIN_SRC shell
certificaat authorize -m example.com -n www.example.com -a joe@example.com -c http-01
#+END_SRC

During this phase, certificaat will, if needed, register a user
account with the ACME CA, and gather the information about the domain
you want to authorize.

- “-m” option indicates the domain you want to authorize. It will feature in the Subject name of the final X.509 certificate.
- “-a” option is the email address used by the CA to send expiry reminders.
- “-n” option is an additional domain name you want to authorize. It will feature in the Subject Alternative Name (SAN) of the certificate. Repeat this option for all required names. Caution: there is a hard limit imposed by the CA. 
- “-c” option is the challenge you want to complete. Repeat this option if you want to offer the CA multiple challenges. 
- “-u” option is the URI to the ACME CA. 

Before exiting, ~certificaat~ will display instructions pertaining to the challenge. This is the time to satisfy the requirements (for example, configuring DNS records or preparing your web server). You are now ready for the second phase. 

**** Request

#+BEGIN_SRC shell
certificaat request -m example.com -n www.example.com -o "Example corp." 
#+END_SRC

During this phase, the challenges will be triggered and, if successfully completed, a certificate downloaded and saved to disk.

**** Info

#+BEGIN_SRC shell
certificaat info -m example.com
#+END_SRC

Certificaat will display a summary of the certificate. 

**** Renew

#+BEGIN_SRC shell
certificaat renew -m example.com 
#+END_SRC

This command can be integrated in an automated workflow. For example, as a cron job.

#+BEGIN_SRC shell
5 8 1 * * certificaat renew -m example.com && /usr/sbin/service nginx reload
#+END_SRC
** Challenges

Certificaat will honor all challenges defined in the ACME specification, but please note that Let’s Encrypt CA does not support the OOB challenge and that TLS-SNI comes in two flavors. 

| Challenge                             | Option identifier       | Let’s Encrypt | Certificaat |
| HTTP                                  | http-01                 | ✓             | ✓           |
| DNS                                   | dns-01                  | ✓             | ✓           |
| TLS with Server Name Indication (SNI) | tls-sni-01 & tls-sni-02 | ✓ & ✕         | ✓           |
| Out-of-Band                           | oob-01                  | ✕             | ✓           |

** Data folder
Certificaat follows the [[https://specifications.freedesktop.org/basedir-spec/latest/][XDG Base Directory Specification]]. The configuration folder is determined by querying the value of ~XDG_CONFIG_HOME~ in the environment, and if not set, will default to ~~/.config/certificaat~.
** Clojure library
In addition to the command line, Certificaat is available on Clojars as a regular Clojure library which you can require in your projects.
[[http://clojars.org/org.danielsz/certificaat/latest-version.svg]]
*** Boot
Certificaat comes with Boot tasks which you can integrate in your builds. This interface offers the same functionality as the binary. In your ~build.boot~ file, define the following tasks and use them the way you see fit.

#+BEGIN_SRC clojure
(deftask authorize []
  (comp
   (certificaat-setup :domain "example.com")
   (certificaat-authorize :domain "example.com" :challenges #{"dns-01"} :san #{"www.example.com"} :contact "mailto:joe@example.com")))

(deftask request []
  (comp
   (certificaat-challenge :domain "example.com")
   (certificaat-request :domain "example.com" :organisation "Example corp." :san #{"www.example.com"})
   (certificaat-info :domain "example.com")))

(deftask renew []
  (comp (certificaat-renew :domain "example.com")
        (certificaat-info :domain "example.com")))

#+END_SRC
** Contributions
If you plan to submit enhancements beyond bug fixes, please coordinate with me beforehand in order to save everybody’s time and effort.
** Credits
I wish to thank [[https://shredzone.org/maven/acme4j/][Richard Körber]] who wrote the Java client for the ACME protocol, [[https://github.com/shred/acme4j][acme4j]], which serves as the foundation for Certificaat. Not only is it well written, it is exquisitely [[https://shredzone.org/maven/acme4j/][documented]]. 
** License
Licensing terms will be revealed shortly. In the meantime, do what you want with it.
